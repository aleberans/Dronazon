package com.example.grpc;

message SendInfoDrone{
  required int32 id=1;
  required int32 portaAscolto=2;
  required string indirizzoDrone=3;
}

message SendPositionToMaster{
  required int32 id=1;
  required Posizione pos=2;

  message Posizione{
    required int32 x=1;
    required int32 y=2;
  }
}

message ackMessage{
  required string message=1;
}


message Consegna{
  required int32 idConsegna=1;
  required Posizione puntoRitiro=2;
  required Posizione puntoConsegna=3;
  required int32 idDrone = 4;

  message Posizione{
    required int32 x=1;
    required int32 y=2;
  }
}

message WhoMaster{
}

message WhoIsMaster{
  required int32 idMaster=1;
}

message SendStat{
  required Posizione posizioneArrivo=1;
  required double kmPercorsi=2;
  required int32 betteriaResidua=3;
  required string timestampArrivo=4;
  required int32 idDrone=5;
  repeated double inquinamento=6;

  message Posizione{
    required int32 x=1;
    required int32 y=2;
  }
}

message ElectionMessage{
  required int32 batteriaResidua = 1;
  required int32 idCurrentMaster = 2;

}

message IdMaster{
  required int32 idNewMaster = 1;
}

message Info{
  required int32 id=3;
  required Posizione posizione=1;
  required int32 batteria = 2;

  message Posizione{
    required int32 x=1;
    required int32 y=2;
  }
}

service DronePresentation{
  rpc presentation(SendInfoDrone) returns (ackMessage);
}

service ReceiveWhoIsMaster{
  rpc master(WhoMaster) returns (WhoIsMaster);
}

service SendConsegnaToDrone{
  rpc sendConsegna(Consegna) returns (ackMessage);
}

service SendPositionToDroneMaster{
  rpc sendPosition(SendPositionToMaster) returns (ackMessage);
}

service ReceiveInfoAfterConsegna{
  rpc receiveInfoDopoConsegna(SendStat) returns (ackMessage);
}

message PingMessage{}

service PingAlive{
  rpc ping(PingMessage) returns (PingMessage);
}

service Election{
  rpc sendElection(ElectionMessage) returns (ackMessage);
}

service NewIdMaster{
  rpc sendNewIdMaster(IdMaster) returns (ackMessage);
}

service SendUpdatedInfoToMaster{
  rpc updatedInfo(Info) returns (ackMessage);
}


